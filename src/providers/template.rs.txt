use std::cmp::Ordering;
use std::fmt::{Display, Formatter, Result as FmtResult};
use std::path::Path;

use super::Error;
use crate::fisovec::FilterSorter;
use crate::tree::{Provider, ProviderExt};

pub struct Template;

#[derive(PartialEq)]
pub struct TemplateFrag;

impl Display for TemplateFrag {
    fn fmt(&self, f: &mut Formatter<'_>) -> FmtResult {
        todo!()
    }
}

impl Provider for Template {
    type Fragment = TemplateFrag;

    fn provide_root(&self) -> Self::Fragment {
        todo!()
    }

    fn provide(&mut self, path: Vec<&Self::Fragment>) -> Vec<Self::Fragment> {
        todo!()
    }
}

impl ProviderExt for Template {}

impl FilterSorter<<Self as Provider>::Fragment> for Template {
    fn compare(
        &self,
        a: &<Self as Provider>::Fragment,
        b: &<Self as Provider>::Fragment,
    ) -> Ordering {
        todo!()
    }

    fn keep(&self, a: &<Self as Provider>::Fragment) -> bool {
        todo!()
    }
}

impl Template {
    pub fn new(path: &str) -> Result<Self, Error> {
        todo!()
    }
}
